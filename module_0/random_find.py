import numpy as np  # Импортируем библиотеку NumPy


def game_core_v3(number):  # Функция для угадывания числа
    # Реализация метода половинного деления. Также была идея
    # начать с predict = np.random.randint(1, 101), однако в случае с фиксированным первым числом ровно
    # посередине (50) угадывание проходит в среднем быстрее на 1 попытку, и количество попыток
    # является более "стабильным", т.е. среднеквадратичное отклонение количества попыток
    # немного меньше.
    # Разделяем множество натуральных чисел от 1 до 100 пополам. Дальше в зависимости
    # от результата угадывания (больше или меньше угаданное число, чем 50) соотетствующее подмножество
    # ещё разделяем пополам - и так, до тех пор, пока не будет найдено загаданное значение. Поскольку
    # по условию все числа - натуральные, используем целочисленное деление.
    count = 1
    predict = 50
    min_ = 0
    max_ = 101
    while number != predict:
        count += 1
        if number > predict:
            min_ = predict
            predict = predict + ((max_ - predict) // 2)
        elif number < predict:
            max_ = predict
            predict = min_ + ((predict - min_) // 2)
        else:
            break
    return count  # выход из цикла, если угадали


def score_game(game_core):  # Функция запуска "игры" - загадывание 1000 значений и
    # проверка работы алгоритма угадывания
    count_ls = []
    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы эксперимент был воспроизводим
    random_array = np.random.randint(1, 101, size=1000)
    for number in random_array:
        count_ls.append(game_core(number))
    score = int(np.mean(count_ls))  # Искомое значение
    stdev = round(float(np.std(count_ls)), 2)  # Техническая проверка: насколько "разбросано" количество
    # попыток для каждого из 1000 загаданных чисел
    med = int(np.median(count_ls))  # Техническая проверка: более робастная оценка
    print(f"Алгоритм угадывает число в среднем за {score} попыток")
    print(f"Стандартное отклонение количества попыток: {stdev} ")
    print(f"Медианное число попыток для угадывания: {med} ")
    return score  # То, что требует вернуть условие задачи


score_game(game_core_v3)
